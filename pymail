#!/usr/bin/env python3

"""A mass email daemon suitable to use with Gmail."""

import argparse
import daemon
import csv
import json
import smtplib
import traceback
import time
import logging
import logging.handlers
from collections import namedtuple


def process_arguments(params=None):
    """Process command line arguments."""
    description = "A mass email daemon suitable to use with Gmail."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--dump', action='store_true', default=False,
                        help="""Dumps example files 'emails.ex', 'message.ex',
                                and 'config.ex', and exit.""")
    group = parser.add_argument_group()
    group.add_argument('emails', type=argparse.FileType('rt'), nargs='?',
                       help='The file with the email list.')
    group.add_argument('message', type=argparse.FileType('rt'), nargs='?',
                       help='The file with the email text template.')
    parser.add_argument('-v', '--version', action="version", version='0.1a')
    parser.add_argument('-C', '--configuration', type=argparse.FileType('rt'),
                        help="""Define a configuration file. By default try to
                             load the file '.config'.""")

    group = parser.add_argument_group("Message",
                                      "Message options.")
    group.add_argument('--subject', help="The message subject.")

    group = parser.add_argument_group("Daemon",
                                      "Options for running as a daemon.")

    group.add_argument('-d', '--daemon', action="store_true", default=False,
                       help="Run as a deamon.")
    group.add_argument('-c', '--count', metavar='NUM', default=0,
                       help="The number of messages to send on each batch.")
    group.add_argument('-t', '--time', metavar='MINS', default=3, type=int,
                       help="The number of minutes between each batch run.")

    args = parser.parse_args(params)

    if not (args.dump or (args.emails and args.message)):
        parser.print_help()
        print("\nA list of emails and a message file is required, or --dump.")
    else:
        return args


Contact = namedtuple('Contact', 'email name')
__msg = "From: {sender}\\n" + \
    'To: {recipient}>\\n' + \
    'Subject: {subject}\\n\\n{body}'
configuration_template = """{{
    "server": "smtp.example.com",
    "port": 465,
    "magic_number": 20,
    "sleep": 60,
    "sender": "No One <noone@example.com",
    "username": "A Gmail User Name",
    "password": "The username plain text password.",
    "template": "{}"
}}""".format(__msg)


def dump():
    """Dump example configuration files."""
    emails = "Some User, some_user_email@example.com"
    message = """Anything could be a message.\nAny message would do.\n"""
    with open('emails.ex', 'wt') as f:
        f.write(emails)
    with open('message.ex', 'wt') as f:
        f.write(message)
    with open('config.ex', 'wt') as f:
        f.write(configuration_template)


def read_email_list_file(options):
    """Read the email list and return a list of email/name pairs."""
    with options.emails as csvfile:
        return [Contact(email=row[1].strip(), name=row[0].strip())
                for row in csv.reader(csvfile)]


def load_configuration():
    """Load configuration from a file or use default configuration."""
    configuration = json.loads(configuration_template)
    try:
        if options.configuration:
            data = "".join(options.configuration.readlines())
        else:
            with open('.config', 'rt') as f:
                data = "".join(f.readlines())
        configuration.update(json.loads(data))
    except Exception as e:
        m = "Could not load any configuration file. Using defaults."
        logging.warn(m)
    return configuration


def connect_to_server(configuration):
    """Connect to the configured SMTP server."""
    smtp_server = configuration['server']
    smtp_port = int(configuration.get('port', 465))
    logging.info("Connecting to {}:{}".format(smtp_server, smtp_port))
    server = smtplib.SMTP_SSL(smtp_server, smtp_port)
    server.ehlo()
    logging.info("Authenticating user: {}".format(configuration['username']))
    server.login(configuration['username'], configuration['password'])
    return server


def report_sent_mail(configuration, index, list_size):
    """Report messages sent in the last batch."""
    magic = configuration.get('magic_number', 20)
    msg = "{} messages sent. {} messages left."
    left = list_size - index
    count = magic if left > magic else left
    left -= count
    logging.info(msg.format(count, left))
    if left > 0:
        sleep = int(configuration.get('sleep', 0))
        logging.info("Sleeping {} seconds".format(sleep))
        time.sleep(sleep)


def main(options):
    """Program entry point, after CLI arguments have been processed."""
    configuration = load_configuration()
    email_list = read_email_list_file(options)
    configuration['subject'] = options.subject if options.subject else ""
    configuration['body'] = "\n".join(options.message.readlines())
    magic = configuration.get('magic_number', 20)
    try:
        for index in range(0, len(email_list), magic):
            server = connect_to_server(configuration)
            addrs = [c for c in email_list[index:index + magic]]
            addrs = ["{} <{}>".format(c.email, c.name) for c in addrs]
            configuration['recipient'] = ",".join(addrs)
            message = configuration.get('template', __msg)
            payload = message.format(**configuration)
            server.sendmail(configuration['sender'], addrs, payload)
            server.quit()
            report_sent_mail(configuration, index, len(email_list))
    except Exception:
        logging.exception(traceback.format_exc())


if __name__ == "__main__":
    options = process_arguments()
    if options:
        log_format = "%(message)s"
        logging.basicConfig(format=log_format, level=logging.INFO)
        if options.dump:
            dump()
        else:
            if options.daemon:
                with daemon.DaemonContext():
                    main(options)
            else:
                main(options)
